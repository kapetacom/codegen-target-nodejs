//#FILENAME:src/service/{{type data.metadata.name}}RouteService.tsx:create-only

import type { Request, Response } from 'express';
import { ConfigProvider } from "@kapeta/sdk-config";
import { {{type data.metadata.name}}Routes } from 'generated:rest/{{type data.metadata.name}}Routes';
{{#eachTypeReference data.spec.methods all=true}}
import { {{type name}} } from "generated:entities/{{type name}}";
{{/eachTypeReference}}


/**
 * Creates the {{type data.metadata.name}}RouteService.
 *
 * Class is created inside the function to allow async initialization to happen. The class structure is optional
 * but just makes it easier to organize the code.
 *
 * @param configProvider The configuration provider to use.
 */
export const create{{type data.metadata.name}}RouteService = async (configProvider:ConfigProvider):Promise<{{type data.metadata.name}}Routes> => {

    /**
    * Defines the implementation of all routes for the {{data.metadata.name}} API
    */
    class {{type data.metadata.name}}RouteService implements {{type data.metadata.name}}Routes {

    {{#methods data.spec.methods}}

        /**
        * {{comment description}}
        * HTTP: {{./method}} {{expressPath path}}
        */
        {{method methodName}}( req:Request<{{paramsMap this}},{{returnType responseType}}, {{bodyType this}}, {{queryMap this}}>, res:Response<{{returnType responseType}}> ): void {
        res.sendError('REST resource method not implemented: "{{method methodName}}"', 501);
        }

    {{/methods}}
    }

    return new {{type data.metadata.name}}RouteService();
}