//#FILENAME:src/.generated/rest/{{kebab (controller-name this)}}-routes.ts:write-always
//
// GENERATED SOURCE - DO NOT EDIT
//
import {Router} from "express";
import {asyncHandler} from "@kapeta/sdk-server";
import { ConfigProvider } from '@kapeta/sdk-config';
import { restAPIMiddleware, createRESTParameterParser } from "@kapeta/sdk-rest-route";
import { create{{controller-name this}}RouteService } from "../../service/{{controller-name this}}RouteService";
import { json } from "body-parser";

/**
 * creates all routes for the {{controller-name this}} API
 */
export const create{{controller-name this}}Router = async (configProvider:ConfigProvider) => {
    const router = Router();
    router.use(json());
    router.use(restAPIMiddleware);

    const service = await create{{controller-name this}}RouteService(configProvider);

    {{#methods methods}}
        // {{method name}}: Verify the method is available
        if (!service.{{method name}}) {
            throw new Error('REST resource service for "{{type ../name}}" is missing method: "{{method name}}"');
        }

        console.log('Publishing REST method: {{uppercase method}} {{expressPath path base=../path}}');

        router.{{lowercase method}}('{{expressPath path base=../path}}',
            createRESTParameterParser([
                {{#arguments parameters}}
                    {
                    name: '{{string name}}',
                    transport: '{{string transport}}',
                    typeName: '{{string (valueType type)}}'
                    }
                {{/arguments}}
            ]),
            asyncHandler(service.{{method name}}.bind(service))
        );

    {{/methods}}

    return router;
}
